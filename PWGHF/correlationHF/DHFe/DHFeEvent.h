#ifndef ALIPHYSICS_PWGHF_CORRELATIONHF_DHFE_DHFEEVENT_H_
#define ALIPHYSICS_PWGHF_CORRELATIONHF_DHFE_DHFEEVENT_H_

#include "AliMultSelection.h"
#include "AliVVertex.h"
#include "DHFeConfig.h"
#include "TTree.h"

namespace dhfe {
namespace model {

/* Stores the unique identification of each event. Each event needs an unique
 * id, generated by using a combination of the run number, directory name (also
 * a number) and event position in the tree. Should be used to identify the
 * event in any other class that needs this information. */
class EventId {
 public:
  /* Construct by providing the values of each property.*/
  EventId(unsigned int run, unsigned int directory, unsigned int event)
      : fRun(run), fDirectory(directory), fEvent(event){};

  /* Constructs an event id using the run number, path of the file and event
   * number. */
  EventId(unsigned int run, const std::string &file_path, unsigned int event)
      : fRun(run), fDirectory(GetFolderNumber(file_path)), fEvent(event) {};
  EventId() = default;

  virtual ~EventId() {};

  /* Creates branches to hold the properties of the event id in a tree. */
  virtual void AddToTree(TTree &tree, int basked_size);

  unsigned int Run() const { return fRun; };
  unsigned int Directory() const { return fDirectory; };
  unsigned int Event() const { return fEvent; };

 private:
  unsigned int fRun{0};
  unsigned int fDirectory{0};
  unsigned int fEvent{0};
  static unsigned int GetFolderNumber(const std::string &file_path);
};

/* Stores event properties */
class Event : public EventId {
 public:
  /* Create a new event using the primary vertex and the multiplicity selection
   * task.*/
  Event(const EventId &id, const AliVVertex *vertex,
        AliMultSelection *multi_selection);
  Event() = default;

  /* Creates branches to hold the properties of the event in a tree. */
  void AddToTree(TTree &tree, int basked_size) override;

 private:
  float fVtxZ{-999.};

  float fMultV0M{-1.};
  float fMultiRefMult08{-1};
  float fMultiSPDTracklets{-1};

  float fMultV0MPercentile{-1};
  float fMultiRefMult08Percentile{-1};
  float fMultiSPDTrackletsPercentile{-1};
};
}  // namespace model
}  // namespace dhfe

#endif  // ALIPHYSICS_PWGHF_CORRELATIONHF_DHFE_DHFEEVENT_H_
